package Algorithms;

public class EightQVersion {
	
		//Main
		public static void main (String[] args) {
			
		    int[][] board = new int[8][8]; 
		    
		    printBoard(board);
		    
		}
		
		
		
		//Recursion Method
		public static boolean solve(int[][] board, int col) {
			
			if (col == 8) { //Base Case
				
			}
			return true;
		
		}
		
		//Check Diagonals and Rows
		public static boolean check(int[][] board, int row, int col) { 
			
				//Check row of specific column
			   for (row = 0; row < 8; col++) {
			        if (board[row][col] == 1) return false;
			    }
		
			    //Check upper-left diagonal
			    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
			        if (board[i][j] == 1) return false;
			    }

			    //Check lower-left diagonal
			    for (int i = row, j = col; i < 8 && j >= 0; i++, j--) {
			        if (board[i][j] == 1) return false;
			    }
			    
			   //If rows and diagonals is safe
			   return true; 
		}
		
		
		//Shows the Final Board
		public static void printBoard(int[][] board) {
			
			for(int i = 0; i < board.length; i++) {
				for (int j = 0; j < board.length; j++) {
					//Prints columns of every row
					System.out.print(board[i][j] + " ");
				}
				//After each row -> next line
				System.out.println();
			}
		
		}

	
}
