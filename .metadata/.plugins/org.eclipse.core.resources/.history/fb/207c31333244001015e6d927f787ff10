package Algorithms;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.GridLayout;

import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

public class EightQueensUI extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					EightQueensUI frame = new EightQueensUI();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public EightQueensUI() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));


		setContentPane(contentPane);
		
		contentPane.setLayout(new GridLayout(8, 8, 2, 2));

	    // Fill the grid with panels (representing chessboard squares)
	    for (int row = 0; row < 8; row++) {
	        for (int col = 0; col < 8; col++) {
	            JPanel cell = new JPanel();
	            
	            // Color alternates like a chessboard
	            if ((row + col) % 2 == 0) {
	                cell.setBackground(Color.WHITE);
	            } else {
	                cell.setBackground(Color.DARK_GRAY);
	            }

	            cell.setBorder(BorderFactory.createLineBorder(Color.BLACK));
	            contentPane.add(cell);
	        }
	    }
	}

}
